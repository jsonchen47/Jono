type Project @model @searchable @auth(rules: [{allow: public}]) {
  id: ID!
  ownerIDs: [String]
  Users: [User] @manyToMany(relationName: "UserProject")
  title: String!
  description: String
  image: String
  skills: [String]
  resources: [String]
  categories: [String]
  longitude: Float
  latitude: Float
  city: String
  joinRequests: [JoinRequest] @hasMany(indexName: "byProject", fields: ["id"])
  groupChatID: String
}

type ChatRoom @model @searchable @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  image: String
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserChatRoom")
  LastMessage: Message @hasOne
}

type Message @model @searchable @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  text: String!
  chatroomID: ID! @index(name: "byChatRoom", sortKeyFields: ["createdAt"], queryField: "listMessagesByChatRoom")
  userID: ID! @index(name: "byUser")
  images: [String]
}

type User @model @searchable @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  status: String
  image: String
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  ChatRooms: [ChatRoom] @manyToMany(relationName: "UserChatRoom")
  Projects: [Project] @manyToMany(relationName: "UserProject")
  savedProjectsIDs: [String]
  bio: String
  numProjects: Int
  numTeams: Int
  numConnections: Int
  username: String
  skills: [String]
  resources: [String]
  links: [String]
  premium: Boolean
  connections: [Connection] @hasMany(indexName: "byUser", fields: ["id"])
  joinRequests: [JoinRequest] @hasMany(indexName: "byUser", fields: ["id"]) # Connection to JoinRequest
}

type Connection @model @searchable @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields: ["createdAt"])
  connectedUserID: ID! @index(name: "byConnectedUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  connectedUser: User @belongsTo(fields: ["connectedUserID"])
  status: String
  createdAt: AWSDateTime
  viewed: Boolean @default(value: "false") 
}

type JoinRequest @model @auth(rules: [{ allow: public }]) {
  id: ID! # The only required field
  userID: ID @index(name: "byUser", sortKeyFields: ["createdAt"]) # Index for user relationships
  projectID: ID @index(name: "byProject", sortKeyFields: ["createdAt"]) # Index for project relationships
  user: User @belongsTo(fields: ["userID"]) # Optional relationship
  project: Project @belongsTo(fields: ["projectID"]) # Optional relationship
  createdAt: AWSDateTime # Optional: Can be null
  viewed: Boolean @default(value: "false") # Optional with default value
}